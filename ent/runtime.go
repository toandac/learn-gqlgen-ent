// Code generated by entc, DO NOT EDIT.

package ent

import (
	"gqlgen-ent/ent/artcile"
	"gqlgen-ent/ent/schema"
	"gqlgen-ent/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	artcileFields := schema.Artcile{}.Fields()
	_ = artcileFields
	// artcileDescTitle is the schema descriptor for title field.
	artcileDescTitle := artcileFields[0].Descriptor()
	// artcile.DefaultTitle holds the default value on creation for the title field.
	artcile.DefaultTitle = artcileDescTitle.Default.(string)
	// artcileDescDescription is the schema descriptor for description field.
	artcileDescDescription := artcileFields[1].Descriptor()
	// artcile.DefaultDescription holds the default value on creation for the description field.
	artcile.DefaultDescription = artcileDescDescription.Default.(string)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[1].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
}
